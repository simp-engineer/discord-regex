const numReplacers = {
    "i": ["1"],
    "l": ["1"],
    "e": ["3"],
    "a": ["4"],
    "s": ["5"],
    "t": ["7"],
    "b": ["8"],
    "g": ["9"],
    "o": ["0"]
};

const symReplacers = {
    "a": ["@", "‚àÜ", "/-\\\\", "/_\\\\", "/\\\\", "–î"],
    "b": ["\\|}", "\\|:", "\\|8", "√ü", "—å"],
    "c": ["\\(", "‚Ç¨"],
    "e": ["¬£"],
    "f": ["∆í", "¬£"],
    "h": ["\\|-\\|", "#", "\\}\\{"],
    "i": ["!", "\\|"],
    "j": [" ù"],
    "k": ["\\|<"],
    "l": ["!", "\\|"],
    "n": ["\\|\\|"],
    "s": ["\\$", "¬ß"],
    "x": ["><"],
    "y": ["¬•"]
};

const letReplacers = {
    "i": ["l"],
    "l": ["i"],
    "u": ["v"],
    "m": ["nn", "rn"],
    "w": ["vv", "uu"]
};

const emoReplacers = {
    "a": ["üá¶", "üÖ∞Ô∏è"],
    "b": ["üáß", "üÖ±Ô∏è"],
    "c": ["üá®", "¬©Ô∏è"],
    "d": ["üá©"],
    "e": ["üá™"],
    "f": ["üá´"],
    "g": ["üá¨"],
    "h": ["üá≠"],
    "i": ["üáÆ", "‚ÑπÔ∏è"],
    "j": ["üáØ"],
    "k": ["üá∞"],
    "l": ["üá±"],
    "m": ["üá≤", "‚ìÇÔ∏è"],
    "n": ["üá≥"],
    "o": ["üá¥", "üÖæÔ∏è‚≠ï"],
    "p": ["üáµ", "üÖøÔ∏è"],
    "q": ["üá∂"],
    "r": ["üá∑", "¬ÆÔ∏è"],
    "s": ["üá∏"],
    "t": ["üáπ", "‚úùÔ∏è"],
    "u": ["üá∫"],
    "v": ["üáª"],
    "w": ["üáº"],
    "x": ["üáΩ", "‚ùå", "‚ùé", "‚úñÔ∏è"],
    "y": ["üáæ"],
    "z": ["üáø"],
    "1": ["1Ô∏è‚É£"],
    "2": ["2Ô∏è‚É£"],
    "3": ["3Ô∏è‚É£"],
    "4": ["4Ô∏è‚É£"],
    "5": ["5Ô∏è‚É£"],
    "6": ["6Ô∏è‚É£"],
    "7": ["7Ô∏è‚É£"],
    "8": ["8Ô∏è‚É£"],
    "9": ["9Ô∏è‚É£"],
    "0": ["0Ô∏è‚É£"]
};

const uniReplacers = {
    "a": ["…ë", "–∞"],
    "b": ["∆Ñ", "–¨", "·èè", "·ë≤", "·ñØ"],
    "c": ["œ≤", "—Å", "·¥Ñ", "‚≤•", "ÍÆØ"],
    "d": ["‘Å", "·èß", "·ëØ", "Íìí"],
    "e": ["–µ", "“Ω", "Í¨≤"],
    "f": ["·∫ù", "Íûô", "Í¨µ"],
    "g": ["∆ç", "…°", "·∂É"],
    "h": ["“ª", "’∞", "·èÇ"],
    "i": ["ƒ±", "…©", "…™", "”è", "·é•", "Íôá", "Í≠µ", "«Ä", "Œô", "–Ü", "”Ä", "◊Ä", "◊ï", "◊ü", "Ÿ°", "€±", "ÿß", "‚≤í", "‚µè", "Íì≤", "êää", "êåâ", "êå†", "ñº®", "Ô∫ç", "Ô∫é", "Ôø®"],
    "l": ["ƒ±", "…©", "…™", "”è", "·é•", "Íôá", "Í≠µ", "«Ä", "Œô", "–Ü", "”Ä", "◊Ä", "◊ï", "◊ü", "Ÿ°", "€±", "ÿß", "‚≤í", "‚µè", "Íì≤", "êää", "êåâ", "êå†", "ñº®", "Ô∫ç", "Ô∫é", "Ôø®"],
    "m": ["ëúÄ", "ë££"],
    "n": ["’∏", "’º"],
    "o": ["œÉ", "–æ", "◊°", "Ÿá", "Ÿ•", "⁄æ", "€Å", "€ï", "€µ", "‡•¶", "‡©¶", "‡´¶", "‡Ø¶", "‡∞Ç", "‡±¶","‡≤Ç","‡≥¶","‡¥Ç","‡∂Ç","‡πê","‡ªê","·Äù","·ÅÄ","·Éø","·¥è","·¥ë","‚≤ü","Í¨Ω","êì™","ë£à","ë£ó","ÔÆ¶","Ôª©","ÔΩè", "‚óã", "‚óç", "‚óè"],
    "p": ["—Ä", "‚≤£", "÷Ñ"],
    "r": ["–≥", "·¥¶", "‚≤Ö", "Í≠á", "Í≠à", "ÍÆÅ"],
    "s": ["∆Ω", "Íú±", "ÍÆ™", "êëà", "ë£Å"],
    "u": [" ã", "œÖ", "’Ω", "·¥ú", "Íûü", "Í≠é", "Í≠í", "ë£ò", "◊ò", "ëúÜ"],
    "v": ["ŒΩ", "—µ", "ÍÆ©", "ë£Ä"],
    "w": ["…Ø", "—°", "‘ù", "’°", "·¥°", "ÍÆÉ", "ëúä", "ëúé", "ëúè"],
    "x": ["—Ö", "·ïÅ", "·ïΩ", "·ôÆ"],
    "y": ["…£", " è", "Œ≥", "—É", "“Ø", "·Éß", "·∂å", "·ªø", "‚ÑΩ", "Í≠ö", "ë£Ñ"],
    "z": ["·¥¢", "ÍÆì"]
}

function generateLeetspeakRegex(text, settings) {

    let end_text = "";
    let previous_charater;
    let previous_charater_combo = 0;
    let previous_charater_modified = false;
    for (var i = 0; i < text.length; i++) {
        let character = (text[i]);
        let replacers = [];

        if (character == previous_charater & previous_charater_modified) {
            previous_charater_combo++;
            continue;
        } else if (previous_charater_combo > 0 & previous_charater_modified) {
            if ((settings & 16) != 0) {
                end_text = end_text.concat(`{${previous_charater_combo + 1},}`);
            } else if ((settings & 512) != 0 && (settings & 16) != 0) {
                end_text = end_text.concat(`+`)
            } else if ((settings & 512) != 0 && (settings & 16) == 0) {
                end_text = end_text.concat(`{1, ${previous_charater_combo + 1}}`)
            } else {
                end_text = end_text.concat(`{${previous_charater_combo + 1}}`);
            }
            previous_charater_combo = 0;
            previous_charater_modified = false;
        } else if (i != 0 & previous_charater_combo == 0 & (settings & 16) != 0) {
            end_text = end_text.concat(`+`);
        };

        if ((settings & 1) != 0) {
            const numbers = numReplacers[character];
            if (numbers) {
                for (var i2 = 0; i2 < numbers.length; i2++) {
                    replacers.push(numbers[i2]);
                };
            };
        };

        if ((settings & 2) != 0) {
            const symbols = symReplacers[character];
            if (symbols) {
                for (var i2 = 0; i2 < symbols.length; i2++) {
                    replacers.push(symbols[i2]);
                };
            };
        };

        if ((settings & 4) != 0) {
            const letters = letReplacers[character];
            if (letters) {
                for (var i2 = 0; i2 < letters.length; i2++) {
                    replacers.push(letters[i2]);
                };
            };
        };

        if ((settings & 8) != 0) {
            const emojis = emoReplacers[character];
            if (emojis) {
                for (var i2 = 0; i2 < emojis.length; i2++) {
                    replacers.push(emojis[i2]);
                };
            };
        };


        if ((settings & 1024) != 0) {
            const unicodes = uniReplacers[character];
            if (unicodes) {
                for (var i2 = 0; i2 < unicodes.length; i2++) {
                    replacers.push(unicodes[i2]);
                };
            };
        };

        let is_all_one_char = true
        for (var i2 = 0; i2 < replacers.length; i2++) {
            let replacer = replacers[i2];

            if (replacer == null) {break}

            if (replacer.replaceAll("\\", "").length > 1 & ((settings & 32) != 0 ||
            /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff])/g.test(replacer))) {
                is_all_one_char = false
            } else if (replacer.replaceAll("\\", "").length > 1) {
                // pass
            } else if (replacer.length > 1) {
                replacers.splice(i2, 1)
                i2--
            }
        };

        if ((settings & 64) != 0 & !end_text == "") {
            end_text = end_text.concat("\\s*")
        }
        if (replacers.length == 0) {
            end_text = end_text.concat(character);
        } else {
            if (is_all_one_char) {
                end_text = end_text.concat(`[${character}${replacers.join('')}]`);
            } else {
                end_text = end_text.concat(`(${character}|${replacers.join('|')})`);
            }
            previous_charater_modified = true;
        };

        if ((settings & 128) != 0 & (character == "a" || character == "e" || character == "i" || character == "o" || character == "u")) {
            end_text = end_text.concat("?")
        };

        previous_charater = character;
    };

    if (previous_charater_combo > 0 & previous_charater_modified) {
        if ((settings & 16) != 0) {
            end_text = end_text.concat(`{${previous_charater_combo + 1},}`);
        } else {
            end_text = end_text.concat(`{${previous_charater_combo + 1}, ${previous_charater_combo + 1}}`);
        }
        previous_charater_combo = 0;
        previous_charater_modified = false;
    };

    if (previous_charater_combo > 0 & previous_charater_modified) {
        if ((settings & 16) != 0  && (settings & 512) == 0) {
            end_text = end_text.concat(`{${previous_charater_combo + 1},}`);
        } else if ((settings & 512) != 0 && (settings & 16) != 0) {
            end_text = end_text.concat(`+`)
        } else if ((settings & 512) != 0 && (settings & 16) == 0) {
            end_text = end_text.concat(`{0, ${previous_charater_combo + 1}}`)
        } else {
            end_text = end_text.concat(`{${previous_charater_combo + 1}}`);
        }
        previous_charater_combo = 0;
        previous_charater_modified = false;
    } else if (previous_charater_combo == 0 & (settings & 16) != 0) {
        end_text = end_text.concat(`+`);
    };

    if ((settings & 256) == 0) {
        end_text = `(\\A|\\s)${end_text}(\\z|\\s)`
    }

    return {
        regex: end_text,
        too_long: end_text.length > 260
    }
}

export { generateLeetspeakRegex }